#include <iostream>
#include <vector>
#include <queue>
using namespace std;

static int N;
static vector<vector<int>> tree;
static vector<int> parent;
void BFS(int node);

int main()
{
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  cin >> N;
  tree.resize(N + 1);
  parent.resize(N + 1);
  
  for(int i = 0; i < N - 1; i++)
  {
    int a, b;
    cin >> a >> b;

    tree[a].push_back(b);
    tree[b].push_back(a);
  }
  
  BFS(1);

  for(int i = 2; i <= N; i++)
  {
    cout << parent[i] << "\n";
  }
}

void BFS(int node)
{
  queue<int> myqueue;
  
  vector<bool> visited(N + 1, false);
  myqueue.push(node);
  visited[node] = true;

  while(!myqueue.empty())
  {
    int now_node = myqueue.front();
    myqueue.pop();

    for(int next_node : tree[now_node])
    {
      if(visited[next_node] == false)
      {
        visited[next_node] = true;
        myqueue.push(next_node);
        parent[next_node] = now_node;
      }
    }
  }
}
