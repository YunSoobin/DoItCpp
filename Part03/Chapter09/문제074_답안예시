#include <iostream>
#include <vector>
#include <queue>
using namespace std;

static int N, M;
static vector<vector<int>> tree;
static vector<int> depth;
static vector<int> parent;
static vector<bool> visited;
int executeLCA(int a, int b);
void BFS(int node);

int main() 
{
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  cin >> N;

  tree.resize(N + 1);
  depth.resize(N + 1);
  parent.resize(N + 1);
  visited.resize(N + 1);
  
  // 인접 리스트 A에 그래프 데이터 저장
  for(int i = 0; i < N - 1; i++)
  {
    int s, e;     
    cin >> s >> e;
    tree[s].push_back(e);
    tree[e].push_back(s);
  }

  BFS(1);  // BFS를 이용하여 깊이 구하기
  
  cin >> M;  // 질문 수
  for(int i = 0; i < M; i++)
  {
    int a, b;  // 공통 조상을 구할 두 노드
    cin >> a >> b;
    int LCA = executeLCA(a, b);
    cout << LCA << "\n";
  }
}

int executeLCA(int a, int b)
{
  if(depth[a] < depth[b])
  {
    int temp = a;
    a = b;
    b = temp;
  }
  // 두 노드의 깊이 맞추기
  while(depth[a] != depth[b])
  {
    a = parent[a];
    
  }
  // 같은 조상이 나올 때까지 한 칸씩 올리기
  while(a != b)
  {
    a = parent[a];
    b = parent[b];
  }
  return a;
}

// BFS 구현
void BFS(int node)
{
  queue<int> myqueue;
  myqueue.push(node);
  visited[node] = true;
  int level = 1;
  int now_size = 1;
  int count = 0;

  while(!myqueue.empty())
  {
    int now_node = myqueue.front();
    myqueue.pop();
    for(int next : tree[now_node])
    {
      if(!visited[next])
      {
        visited[next] = true;
        myqueue.push(next);
        parent[next] = now_node;  // 부모 노드 저장
        depth[next] = level;  // 노드 깊이 저장
      }
    }
    count++;
    if(count == now_size)
    {
      count = 0;
      now_size = myqueue.size();
      level++;
    }
  }
}
