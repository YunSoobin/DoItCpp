#include <iostream>
#include <vector>
using namespace std;

int main()
{
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int N, check;
  cin >> N >> check;

  vector<long long> dp(N + 1, 1);  // 자릿수에 따른 순열의 개수
  for(int i = 2; i <= N; i++)
  {
    dp[i] = dp[i - 1] * i;
  }

  vector<bool> visited(N + 1, false);
  vector<int> S(N + 1);
  long long k = 1;
  
  if(check == 1)
  {
    cin >> k;

    for(int i = 1; i <= N; i++)
    {
      for(int j = 1, cnt = 1; j <= N; j++)
      {
        if(visited[j])
        {
          continue;
        }
        
        if(k <= dp[N - i] * cnt)
        {
          k -= dp[N - i] * (cnt - 1);
          S[i] = j;
          visited[j] = true;
          break;
        }
        cnt++;
      }
    }

    for(int i = 1; i <= N; i++)
    {
      cout << S[i] << " ";
    }
  }
  else if(check == 2)
  {
    for(int i = 1; i <= N; i++)
    {
      cin >> S[i];
    }
    
    for(int i = 1; i <= N; i++)
    {
      int cnt = -1;
      for(int j = 1; j <= S[i]; j++)
      {
        if(!visited[j])
        {
          cnt++;
        }
      }
      visited[S[i]] = true;
      k += (cnt * dp[N - i]); 
    }

    cout << k;
  }
  
  return 0;
}
