#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int main()
{
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int n, m;
  cin >> n >> m;

  vector<vector<pair<int, int>>> outcity(n + 1);
  vector<vector<pair<int, int>>> incity(n + 1);
  vector<int> indegree(n + 1, 0);
  vector<int> time(n + 1, 0);
  for(int i = 0; i < m; i++)
  {
    int s, e, c;
    cin >> s >> e >> c;

    outcity[s].push_back(make_pair(e, c));
    incity[e].push_back(make_pair(s, c));
    indegree[e]++;
  }

  int start, end;
  cin >> start >> end;
  
  queue<int> myqueue;
  myqueue.push(start);
  while(!myqueue.empty())
  {
    int now_city = myqueue.front();
    myqueue.pop();

    for(pair<int, int> next : outcity[now_city])
    {
      int next_city = next.first;
      int cost = next.second;

      time[next_city] = max(time[next_city], time[now_city] + cost);
      if(--indegree[next_city] == 0)
      {
        myqueue.push(next_city);
      }
    }
  }

  cout << time[end] << "\n";

  vector<bool> visited(n + 1, false);
  visited[end] = true;
  int count = 0;
  myqueue.push(end);
  while(!myqueue.empty())
  {
    int now_city = myqueue.front();
    myqueue.pop();
    
    for(pair<int, int> before : incity[now_city])
    {
      int before_city = before.first;
      int cost = before.second;
      
      if(time[now_city] == time[before_city] + cost)
      {
        count++;
        if(visited[before_city] == false)
        {
          visited[before_city] = true;
          myqueue.push(before_city);
        }
      }
    }
  }

  cout << count;

  return 0;
}
