#include <iostream>
#include <vector>

using namespace std;

static vector<int> parent;
static vector<int> trueP;
static vector<vector<int>> party;
static int result;
void unionfunc(int a, int b);
int find(int a);

int main() 
{
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int N, M, T;
  cin >> N >> M >> T;
  
  trueP.resize(T);
  // 진실을 아는 사람 저장
  for(int i = 0; i < T; i++)
  {
    cin >> trueP[i];
  }
  
  party.resize(M);
  // 파티 데이터 저장
  for(int i = 0; i < M; i++)
  {
    int party_size;
    cin >> party_size;

    for(int j = 0; j < party_size; j++)
    {
      int temp;
      cin >> temp;
      party[i].push_back(temp);
    }
  }

  parent.resize(N + 1);
  // 대표 노드를 자기 자신으로 초기화하기
  for(int i = 0; i <= N; i++)
  {
    parent[i] = i;
  }

  // 각 파티에 참여한 사람을 하나의 그룹으로 만들기 -> union 연산
  for(int i = 0; i < M; i++)
  {
    int firstPeople = party[i][0];
    for(int j = 1; j < party[i].size(); j++)
    {
      unionfunc(firstPeople, party[i][j]);
    }
  }

  // 각 파티에서 진실을 아는 사람과 같은 그룹에 있다면 과장할 수 있음
  for(int i = 0; i < M; i++)
  {
    bool isPossible = true;
    int cur = party[i][0];
    for(int j = 0; j < T; j++)
    {
      if(find(cur) == find(trueP[j]))
      {
        isPossible = false;
        break;
      }
    }
    // 모두 다르면 결괏값 1 증가
    if(isPossible)
    {
      result++;
    }
  }
  cout << result;

}

// union 연산 : 바로 연결이 아닌 대표 노드끼리 연결함
void unionfunc(int a, int b)
{
  a = find(a);
  b = find(b);

  if(a != b)
  {
    parent[b] = a;
  }
}

// find 연산 : 대표 노드 반환
int find(int a)
{
  if(a == parent[a])
  {
    return a;
  }
  else
  {
    return parent[a] = find(parent[a]);  // 재귀 함수 형태로 구현
  }
}
