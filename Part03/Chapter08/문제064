#include <iostream>
#include <vector>
#include <tuple>
#include <algorithm>
using namespace std;

int find_parent(int n);
void union_parent(int a, int b);
static vector<int> parent;

int main()
{
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int V, E;
  cin >> V >> E;

  vector<tuple<int, int, int>> graph;
  
  for(int i = 0; i < E; i++)
  {
    int A, B, C;
    cin >> A >> B >> C;

    graph.push_back(make_tuple(C, A, B));
  }

  sort(graph.begin(), graph.end());
  reverse(graph.begin(), graph.end());

  parent.resize(V + 1);
  for(int i = 0; i <= V; i++)
  {
    parent[i] = i;
  }

  int count = 1;
  long result = 0;
  while(count < V)
  {
    int cost = get<0>(graph.back());
    int node1 = get<1>(graph.back());
    int node2 = get<2>(graph.back());
    graph.pop_back();

    if(find_parent(node1) != find_parent(node2))
    {
      count++;
      result += cost;
      union_parent(node1, node2);
    }
  }

  cout << result;

  return 0;
}

int find_parent(int n)
{
  if(parent[n] == n)
  {
    return n;
  }
  else
  {
    return parent[n] = find_parent(parent[n]);
  }
}

void union_parent(int a, int b)
{
  a = find_parent(a);
  b = find_parent(b);

  if(a < b)
  {
    parent[b] = a;
  }
  else if(b < a)
  {
    parent[a] = b;
  }
}
