#include <iostream>
#include <queue>
using namespace std;

void munion(int a, int b);
int find(int a);
void BFS(int i, int j);

static int dr[] = {-1, 0, 1, 0};
static int dc[] = {0, 1, 0, -1};
static int map[101][101];
static bool visited[101][101] = {false, };
static vector<int> parent;
static int N, M, sNum;
static vector<vector<pair<int, int>>> sumlist;
static vector<pair<int, int>> mlist;

// 에지 정보 구조체 생성, 가중치 값 기준 오름차순 정렬로 설정
typedef struct Edge
{
  int s, e, v;
  bool operator > (const Edge& temp) const
  {
    return v > temp.v;
  }
} Edge;

static priority_queue<Edge, vector<Edge>, greater<Edge>> pq;

int main() 
{
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  cin >> N >> M;

  for(int i = 0; i < N; i++)
  {
    for(int j = 0; j < M; j++)
    {
      cin >> map[i][j];  // 맵 정보 저장
    }
  }

  sNum = 1;

  // 각 자리에서 BFS 탐색을 이용하여 섬을 분리
  for(int i = 0; i< N; i++)
  {
    for(int j = 0; j < M; j++)
    {
      if(map[i][j] != 0 && visited[i][j] != true)
      {
        BFS(i, j);
        sNum++;
        sumlist.push_back(mlist);
      }
    }
  }

  // 섬의 각 지점에서 만들 수 있는 모든 에지를 저장
  for(int i = 0; i < sumlist.size(); i++)
  {
    vector<pair<int, int>> now = sumlist[i];

    for(int j = 0; j < now.size(); j++)
    {
      int r = now[j].first;
      int c = now[j].second;
      int now_S = map[r][c];

      // 4방향 검색
      for(int d = 0; d < 4; d++)
      {
        int tempR = dr[d];
        int tempC = dc[d];
        int blength = 0;

        while(r + tempR >= 0 && r + tempR < N && c + tempC >= 0 && c + tempC < M)
        {
          // 같은 섬이면 에지를 만들 수 없음
          if(map[r + tempR][c + tempC] == now_S)
          {
            break;
          }
          // 같은 섬이 아니고 바다가 아니면
          else if(map[r + tempR][c + tempC] != 0)
          {
            // 다른 섬 -> 길이가 1 이상일 때 에지로 더하기
            if(blength > 1)
            {
              pq.push(Edge{now_S, map[r + tempR][c + tempC], blength});
            }
            break;
          }
          // 바다라면 다리 길이 연장하기
          else
          {
            blength++;
          }

          if(tempR < 0)
          {
            tempR--;
          }
          else if(tempR > 0)
          {
            tempR++;
          }
          else if(tempC < 0)
          {
            tempC--;
          }
          else if(tempC > 0)
          {
            tempC++;
          }
        }
      }
    }
  }

  parent.resize(sNum);

  for(int i = 0; i < parent.size(); i++)
  {
    parent[i] = i;
  }

  int useEdge = 0;
  int result = 0;

  // 최소 신장 트리 알고리즘 수행하기
  while(!pq.empty())
  {
    Edge now = pq.top();
    pq.pop();

    // 같은 부모가 아니라면 -> 연결 가능
    if(find(now.s) != find(now.e))
    {
      munion(now.s, now.e);
      result = result + now.v;
      useEdge++;
    }
  }

  // 배열에서 쉽게 index를 처리하고자 sNum을 1부터 시작하였으므로
  // 현재 sNum의 값이 섬의 개수보다 1 많은 상태임
  // 그러므로 1 작은 수가 아닌 2 작은 수와 사용 에지를 비교함
  if(useEdge == sNum - 2)
  {
    cout << result << "\n";
  }
  else
  {
    cout << -1 << "\n";
  }

}

// union 연산 : 대표 노드끼리 연결함
void munion(int a, int b)
{
  a = find(a);
  b = find(b);

  if(a != b)
  {
    parent[b] = a;
  }
}

// find 연산
int find(int a)
{
  if(a == parent[a])
  {
    return a;
  }
  else
  {
    return parent[a] = find(parent[a]);  // 재귀 함수 형태로 구현 -> 경로 압축 부분
  }
}

// BFS를 통하여 연결된 섬 찾기
void BFS(int i, int j)
{
  queue<pair<int, int>> myqueue;
  mlist.clear();

  myqueue.push(make_pair(i, j));
  mlist.push_back(make_pair(i, j));
  visited[i][j] = true;
  map[i][j] = sNum;

  while(!myqueue.empty())
  {
    int r = myqueue.front().first;
    int c = myqueue.front().second;
    myqueue.pop();

    // 4방향 검색
    for(int d = 0; d < 4; d++)
    {
      int tempR = dr[d];
      int tempC = dc[d];

      while(r + tempR >= 0 && r + tempR < N && c + tempC >= 0 && c + tempC < M)
      {
        // 현재 방문한 적이 없고 바다가 아니면 같은 섬으로 취급
        if(visited[r + tempR][c + tempC] == false && map[r + tempR][c + tempC] != 0)
        {
          int now_i = r + tempR;
          int now_j = c + tempC;
          map[now_i][now_j] = sNum;
          visited[now_i][now_j] = true;
          mlist.push_back(make_pair(now_i, now_j));
          myqueue.push(make_pair(now_i, now_j));
        }
        else
        {
          break;
        }

        if(tempR < 0)
        {
          tempR--;
        }
        else if(tempR > 0)
        {
          tempR++;
        }
        else if(tempC < 0)
        {
          tempC--;
        }
        else if(tempC > 0)
        {
          tempC++;
        }
      }
    }
  }
}

