#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int main()
{
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int N;
  cin >> N;

  vector<int> time(N + 1, 0);
  vector<int> indegree(N + 1, 0);
  vector<vector<int>> outnode(N + 1);
  for(int i = 1; i <= N; i++)
  {
    cin >> time[i];

    while(true)
    {
      int pre;
      cin >> pre;
      if(pre == -1)
      {
        break;
      }

      indegree[i]++;
      outnode[pre].push_back(i);
    }
  }

  queue<int> myqueue;
  vector<int> result(N + 1, 0);
  for(int i = 1; i <= N; i++)
  {
    if(indegree[i] == 0)
    {
      myqueue.push(i);
    }
  }

  vector<bool> visited(N + 1, false);
  while(!myqueue.empty())
  {
    int now = myqueue.front();
    myqueue.pop();
    visited[now] = true;

    for(int next : outnode[now])
    {
      if(!visited[next])
      {
        indegree[next]--;
        result[next] = max(result[next], result[now] + time[now]);

        if(indegree[next] == 0)
        {
          myqueue.push(next);
        }
      }
    }
  }

  for(int i = 1; i <= N;i++)
  {
    result[i] += time[i];
    cout << result[i] << "\n";
  }
  
  return 0;
}
