#include <iostream>
using namespace std;

static int INF = 1000000 * 16 + 1;
static int N;
static int W[16][16];
static int D[16][(1 << 16)];
int tsp(int c, int v);

int main() 
{
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  cin >> N;
  for(int i = 0; i < N; i++)
  {
    for(int j = 0; j < N; j++)
    {
      cin >> W[i][j];
    }
  }

  cout << tsp(0, 1) << "\n";  

}

int tsp(int c, int v)
{
  // 모든 경우의 수에 대한 완전 탐색, 재귀 구현
  if(v == (1 << N) - 1)  // 모든 노드를 방문했을 때
  {
    return W[c][0] == 0 ? INF : W[c][0];
  }
  // 이미 방문한 노드일 때 -> 이미 계산했다면 바로 반환(메모제이션)
  if(D[c][v] != 0)
  {
    return D[c][v];
  }
  int min_val = INF;
  for(int i = 0; i < N; i++)
  {
    if((v & (1 << i)) == 0 && W[c][i] != 0)  // 방문한 적이 없고 갈 수 있는 도시일 때
    {
      min_val = min(min_val, tsp(i, (v | (1 << i))) + W[c][i]);
    }
  }
  D[c][v] = min_val;
  return D[c][v];
}
