#include <iostream>
#include <vector>
#include <queue>
using namespace std;

void BFS();
static int N, M;
static vector<vector<int>> maze;
static vector<int> dx = {0, 0, -1, 1};
static vector<int> dy = {-1, 1, 0, 0};
static queue<pair<int, int>> myqueue;

int main()
{
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  cin >> N >> M;

  maze.resize(N, vector<int>(M, 0));
  for(int i = 0; i < N; i++)
  {
    string str; 
    cin >> str;

    for(int j = 0; j < M; j++)
    {
      maze[i][j] = str[j] - '0';
    }
  }

  myqueue.push(make_pair(0, 0));
  maze[0][0] = 2;
  BFS();
  
  cout << maze[N - 1][M - 1] - 1;

  return 0;
}

void BFS()
{
  while(!myqueue.empty())
  {
    pair<int, int> now = myqueue.front();
    myqueue.pop();
    int x = now.first;
    int y = now.second;
    
    for(int i = 0; i < 4; i++)
    {
      int next_x = x + dx[i];
      int next_y = y + dy[i];
      if(next_x >= 0 && next_x < N && next_y >= 0 && next_y < M)
      {
        if(maze[next_x][next_y] == 1)
        {
          maze[next_x][next_y] = maze[x][y] + 1;
          myqueue.push(make_pair(next_x, next_y));
        }
      }
    }
  }

}
