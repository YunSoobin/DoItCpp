#include <iostream>
#include <vector>

using namespace std;

void DFS(int node);
static vector<vector<int>> A;
static vector<int> check;
static vector<bool> visited;
static bool IsEven;

int main() 
{
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int N;
  cin >> N;
  for(int t = 0; t < N; t++)
  {
    int V, E;
    cin >> V >> E;
    A.resize(V + 1);
    visited.resize(V + 1);
    check.resize(V + 1);
    IsEven = true;

    for(int i = 0; i < E; i++)
    {
      int S, E;
      cin >> S >> E;
      A[S].push_back(E);
      A[E].push_back(S);
    }
    // 주어진 그래프가 하나로 연결된다는 보장이 없으므로 모든 노드에서 수행
    for(int i = 1; i <= V; i++)
    {
      if(IsEven)
      {
        DFS(i);
      }
      else
      {
        break;
      }
    }
    if(IsEven)
    {
      cout << "YES" << "\n";
    }
    else
    {
      cout << "NO" << "\n";
    }
    for(int i = 0; i <= V; i++)
    {
      A[i].clear();
      visited[i] = false;
      check[i] = 0;
    }
  }
}

// DFS 구현
void DFS(int node)
{
  visited[node] = true;

  for(int i : A[node])
  {
    // 인접한 노드는 같은 집합이 아니므로 이전 노드와 다른 집합으로 처리
    if(!visited[i])
    {

      check[i] = (check[node] + 1) % 2;
      DFS(i);
    }
    // 이미 방문한 노드가 현재 노드와 같은 집합이면 이분 그래프가 아님
    else if(check[node] == check[i])
    {
      IsEven = false;
    }
  }
}
